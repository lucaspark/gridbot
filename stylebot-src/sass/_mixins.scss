// Pixels to REMs
//--------------------------

// Allow you to enter pixel values while final css displays rems.

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function rem($x, $fallback:false) {
  $base: 16;
  $value: strip-units($x);
  @if unit($x) == "px"{
      @return if($fallback, $value*1px, $value/$base*1rem);
    }
  @else {
      @return $x;
    }
}


// Break Point
// -------------------------

@mixin bp($breakpoint) {
	@if $breakpoint == mobile {
		@media only screen and (max-width: $break) { @content; }
	}
	@if $breakpoint == desktop {
		@media only screen and (min-width: $break) { @content; }
	}
}


// Calc
// -------------------------

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// User select
// -------------------------
@mixin user-select($select) {
	-webkit-user-select: $select;
	-moz-user-select: $select;
	-ms-user-select: $select;
	-o-user-select: $select;
	user-select: $select;
}

// Clearfix
// -------------------------

@mixin clearfix() {
	zoom: 1;
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Border Radius
// -------------------------
@mixin border-radius($border-radius) {
	-moz-border-radius: $border-radius;
	-webkit-border-radius: $border-radius;
	border-radius:$border-radius;
}

// Single side border-radius
@mixin border-top-radius($radius) {
	border-top-right-radius: $radius;
	 border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
	border-bottom-right-radius: $radius;
		 border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
	border-bottom-right-radius: $radius;
	 border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
	border-bottom-left-radius: $radius;
		 border-top-left-radius: $radius;
}

// Content Mixins
// -------------------------

@mixin show() {
	display:block !important;
}

@mixin hidden(){
	display:none !important;
	visibility:hidden !important;
}

@mixin invisible(){
	visibility:hidden !important;
}

// Opacity
// -------------------------

@mixin opacity($opacity) {
	opacity: $opacity;
	// IE8 filter
	$opacity-ie: ($opacity * 100);
	filter: unquote("alpha(opacity=#{$opacity-ie})");
}

// Buttons
// -------------------------

@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
	padding: $padding-vertical $padding-horizontal;
	font-size: $font-size;
	line-height: $line-height;
	border-radius: $border-radius;
}

// Pagination
// ----------------------------
@mixin pagination-variant($color, $background) {
	background: $background;
	color: $color;
		li {
			a,
			span {
			border-left: 2px solid adjust-color($background, $saturation: -5%, $lightness: 10%);
	        color: $color;
			}
			a:hover,
			span:hover,
			a:focus,
			span:focus {
			  background-color: lighten($background, 7%);
			}
			a.active,
			span.active {
			  background-color: adjust-color($background, $saturation: -10%, $lightness: -8%);
			  color: $color;
			  &:hover{
			  background-color: adjust-color($background, $saturation: -10%, $lightness: -8%);
			  color: $color;
			  }
			}
		}
		li.previous,
		li.next {
		  a.disabled,
		  span.disabled {
		  background-color: adjust-color($background, $saturation: -10%, $lightness: -8%);
		  color: $background;
		    &:hover,
		    &:focus {
		    background-color: adjust-color($background, $saturation: -10%, $lightness: -8%);
		    color: $background;
		    }
		  }
		}
		li.previous > a,
		li.next > a,
		li.previous > span,
		li.next > span {
		  border-right: 2px solid adjust-color($background, $saturation: -5%, $lightness: 10%);
		}
		li.next > a,
		li.next > span {
		  border-right: none;
		}
}

// Webkit Focus
// -------------------------

@mixin tab-focus() {
	// Default
	outline: thin dotted #333;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Text overflow
// --------------------------

@mixin text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Alert Variant
// --------------------------

@mixin alerts($alert-name) {
	background: map-get(map-get($alert-colors, $alert-name), bg);
	color: map-get(map-get($alert-colors, $alert-name), text);
	a, .close {
		color: darken(map-get(map-get($alert-colors, $alert-name), text),10%);
		&:hover, &:focus, .close:hover, .close:focus {
			color: map-get(map-get($alert-colors, $alert-name), text);
		}
	}
	&:before {
		content: map-get(map-get($alert-colors, $alert-name), icon);
	}
}

// Absolute Centering
// --------------------------

@mixin abs-center(){
	display: block;
  	margin: 0 auto;
}

// Responsive Images
// ---------------------------

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}